/**
  * Author: Sam Albon
  * Created: 24/02/2011
  * Contains all static data and prototyes related to
  * rendering on the PSP display
  */

#include <libgu.h>
#include <libgum.h>
#include <displaysvc.h>
#include <ctrlsvc.h>
#include <stdlib.h>
#include <psptypes.h>
#include <kernel.h>

/* Redefine later with handrolled function if time */
#define BlockUntilFrameReady sceDisplayWaitVblankStart
#define SCALE 0.25f

unsigned char _frame;

/**
  * Data copied over from the Cube demo
  */
#define CUBE 2
typedef struct 
{
	ScePspFVector3	rot;
	ScePspFVector3	trans;
} POS;
static char disp_list[0x10000] __attribute__((aligned(64)));
static ScePspFMatrix4 matrix_stack[4+4+8+0];
static POS pos;
typedef struct 
{
	float u;
	float v;
	float nx;
	float ny;
	float nz;
	float x;
	float y;
	float z;
} Vertex;
static const Vertex Cube[36] = {
	{
		0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f,
		1.000000f, 1.000000f, -1.000000f,	/* 0 */
	},
	{
		1.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f,
		1.000000f, 1.000000f, 1.000000f,	/* 1 */
	},
	{
		0.000000f, 1.000000f,
		0.000000f, 1.000000f, 0.000000f,
		-1.000000f, 1.000000f, -1.000000f,	/* 2 */
	},

	{
		0.000000f, 1.000000f,
		0.000000f, 1.000000f, 0.000000f,
		-1.000000f, 1.000000f, -1.000000f,	/* 2 */
	},
	{
		1.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f,
		1.000000f, 1.000000f, 1.000000f,	/* 1 */
	},
	{
		1.000000f, 1.000000f,
		0.000000f, 1.000000f, 0.000000f,
		-1.000000f, 1.000000f, 1.000000f,	/* 3 */
	},

	{
		0.000000f, 0.000000f,
		-1.000000f, 0.000000f, 0.000000f,
		-1.000000f, 1.000000f, -1.000000f,	/* 2 */
	},
	{
		1.000000f, 0.000000f,
		-1.000000f, 0.000000f, 0.000000f,
		-1.000000f, 1.000000f, 1.000000f,	/* 3 */
	},
	{
		0.000000f, 1.000000f,
		-1.000000f, 0.000000f, 0.000000f,
		-1.000000f, -1.000000f, -1.000000f,	/* 4 */
	},

	{
		0.000000f, 1.000000f,
		-1.000000f, 0.000000f, 0.000000f,
		-1.000000f, -1.000000f, -1.000000f,	/* 4 */
	},
	{
		1.000000f, 0.000000f,
		-1.000000f, 0.000000f, 0.000000f,
		-1.000000f, 1.000000f, 1.000000f,	/* 3 */
	},
	{
		1.000000f, 1.000000f,
		-1.000000f, 0.000000f, 0.000000f,
		-1.000000f, -1.000000f, 1.000000f,	/* 5 */
	},

	{
		0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f,
		-1.000000f, 1.000000f, 1.000000f,	/* 3 */
	},
	{
		1.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f,	/* 1 */
	},
	{
		0.000000f, 1.000000f,
		0.000000f, 0.000000f, 1.000000f,
		-1.000000f, -1.000000f, 1.000000f,	/* 5 */
	},

	{
		0.000000f, 1.000000f,
		0.000000f, 0.000000f, 1.000000f,
		-1.000000f, -1.000000f, 1.000000f,	/* 5 */
	},
	{
		1.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f,	/* 1 */
	},
	{
		1.000000f, 1.000000f,
		0.000000f, 0.000000f, 1.000000f,
		1.000000f, -1.000000f, 1.000000f,	/* 6 */
	},

	{
		0.000000f, 0.000000f,
		1.000000f, 0.000000f, 0.000000f,
		1.000000f, 1.000000f, 1.000000f,	/* 1 */
	},
	{
		1.000000f, 0.000000f,
		1.000000f, 0.000000f, 0.000000f,
		1.000000f, 1.000000f, -1.000000f,	/* 0 */
	},
	{
		0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f,
		1.000000f, -1.000000f, 1.000000f,	/* 6 */
	},

	{
		0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f,
		1.000000f, -1.000000f, 1.000000f,	/* 6 */
	},
	{
		1.000000f, 0.000000f,
		1.000000f, 0.000000f, 0.000000f,
		1.000000f, 1.000000f, -1.000000f,	/* 0 */
	},
	{
		1.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f,
		1.000000f, -1.000000f, -1.000000f,	/* 7 */
	},

	{
		0.000000f, 0.000000f,
		0.000000f, 0.000000f, -1.000000f,
		1.000000f, 1.000000f, -1.000000f,	/* 0 */
	},
	{
		1.000000f, 0.000000f,
		0.000000f, 0.000000f, -1.000000f,
		-1.000000f, 1.000000f, -1.000000f,	/* 2 */
	},
	{
		0.000000f, 1.000000f,
		0.000000f, 0.000000f, -1.000000f,
		1.000000f, -1.000000f, -1.000000f,	/* 7 */
	},

	{
		0.000000f, 1.000000f,
		0.000000f, 0.000000f, -1.000000f,
		1.000000f, -1.000000f, -1.000000f,	/* 7 */
	},
	{
		1.000000f, 0.000000f,
		0.000000f, 0.000000f, -1.000000f,
		-1.000000f, 1.000000f, -1.000000f,	/* 2 */
	},
	{
		1.000000f, 1.000000f,
		0.000000f, 0.000000f, -1.000000f,
		-1.000000f, -1.000000f, -1.000000f,	/* 4 */
	},

	{
		0.000000f, 0.000000f,
		0.000000f, -1.000000f, 0.000000f,
		-1.000000f, -1.000000f, -1.000000f,	/* 4 */
	},
	{
		1.000000f, 0.000000f,
		0.000000f, -1.000000f, 0.000000f,
		-1.000000f, -1.000000f,  1.000000f,	/* 5 */
	},
	{
		0.000000f, 1.000000f,
		0.000000f, -1.000000f, 0.000000f,
		1.000000f, -1.000000f, -1.000000f,	/* 7 */
	},

	{
		0.000000f, 1.000000f,
		0.000000f, -1.000000f, 0.000000f,
		1.000000f, -1.000000f, -1.000000f,	/* 7 */
	},
	{
		1.000000f, 0.000000f,
		0.000000f, -1.000000f, 0.000000f,
		-1.000000f, -1.000000f, 1.000000f,	/* 5 */
	},
	{
		1.000000f, 1.000000f,
		0.000000f, -1.000000f, 0.000000f,
		1.000000f, -1.000000f, 1.000000f,	/* 6 */
	}
};

void StartUpDisplay();
void StartRendering();
void StopRendering();
void RenderCube(unsigned char, unsigned char, unsigned char);
void TestRender();
